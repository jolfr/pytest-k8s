name: Release

on:
  push:
    branches:
      - main

permissions: {}

jobs:
  lint:
    name: Run Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Install dependencies
        run: |
          uv sync --all-extras
          
      - name: Run ruff check
        run: |
          uv run ruff check .
          
      - name: Run ruff format check
        run: |
          uv run ruff format --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Install kind
        run: |
          # Download and install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
      - name: Install kubectl
        run: |
          # Download and install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          
      - name: Verify Docker, kind, and kubectl
        run: |
          # Docker should already be available on GitHub Actions Ubuntu runners
          docker --version
          kind --version
          kubectl version --client
          
      - name: Install dependencies
        run: |
          uv sync --all-extras
          
      - name: Run tests
        run: |
          uv run pytest -x

  release:
    name: Release
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_name: pytest-k8s ${{ steps.semantic.outputs.new_release_version }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            conventional-changelog-conventionalcommits
            
      - name: Update version in pyproject.toml
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          
      - name: Build release distributions
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          uv build
          
      - name: Create GitHub Release
        if: steps.semantic.outputs.new_release_published == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.semantic.outputs.new_release_version }}
          release_name: pytest-k8s ${{ steps.semantic.outputs.new_release_version }}
          body: |
            ${{ steps.semantic.outputs.new_release_notes }}
          draft: false
          prerelease: false
          
      - name: Upload wheel to release
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/pytest_k8s-${{ steps.semantic.outputs.new_release_version }}-py3-none-any.whl
          asset_name: pytest_k8s-${{ steps.semantic.outputs.new_release_version }}-py3-none-any.whl
          asset_content_type: application/zip
          
      - name: Upload sdist to release
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/pytest_k8s-${{ steps.semantic.outputs.new_release_version }}.tar.gz
          asset_name: pytest_k8s-${{ steps.semantic.outputs.new_release_version }}.tar.gz
          asset_content_type: application/gzip

  pypi-publish:
    name: Publish to PyPI
    needs: [release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing to PyPI
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/project/pytest-k8s/${{ needs.release.outputs.new_release_name }}

    steps:
      - name: Download release assets
        run: |
          mkdir -p dist
          # Extract version from release tag (remove 'v' prefix)
          VERSION="${{ needs.release.outputs.new_release_version }}"
          
          # Download wheel
          curl -L -o "dist/pytest_k8s-${VERSION}-py3-none-any.whl" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/pytest_k8s-${VERSION}-py3-none-any.whl"
          
          # Download sdist
          curl -L -o "dist/pytest_k8s-${VERSION}.tar.gz" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/pytest_k8s-${VERSION}.tar.gz"
          
          # List downloaded files
          ls -la dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
