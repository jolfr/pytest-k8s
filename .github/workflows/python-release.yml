name: Release

on:
  push:
    branches:
      - main

permissions: {}

jobs:
  lint:
    name: Run Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Install dependencies
        run: |
          uv sync --all-extras
          
      - name: Run ruff check
        run: |
          uv run ruff check .
          
      - name: Run ruff format check
        run: |
          uv run ruff format --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        
      - name: Install kind
        run: |
          # Download and install kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
      - name: Install kubectl
        run: |
          # Download and install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          
      - name: Verify Docker, kind, and kubectl
        run: |
          # Docker should already be available on GitHub Actions Ubuntu runners
          docker --version
          kind --version
          kubectl version --client
          
      - name: Install dependencies
        run: |
          uv sync --all-extras
          
      - name: Run tests
        run: |
          uv run pytest -x

  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write
    outputs:
      new_release_published: ${{ steps.release.outputs.released }}
      new_release_version: ${{ steps.release.outputs.version }}
      
    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
          changelog: true
          build: true
          config_file: ".releaserc.json"

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.2.0
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  pypi-publish:
    name: Publish to PyPI
    needs: [release]
    runs-on: ubuntu-latest
    if: needs.release.outputs.new_release_published == 'true'
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing to PyPI
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/p/pytest-k8s/

    steps:
      - name: Download release assets
        run: |
          mkdir -p dist
          # Extract version from release tag (remove 'v' prefix)
          VERSION="${{ needs.release.outputs.new_release_version }}"
          
          # Download wheel
          curl -L -o "dist/pytest_k8s-${VERSION}-py3-none-any.whl" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/pytest_k8s-${VERSION}-py3-none-any.whl"
          
          # Download sdist
          curl -L -o "dist/pytest_k8s-${VERSION}.tar.gz" \
            "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/pytest_k8s-${VERSION}.tar.gz"
          
          # List downloaded files
          ls -la dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
